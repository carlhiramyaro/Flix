import React, { useEffect, useState } from "react";
import {
  SafeAreaView,
  StyleSheet,
  View,
  Text,
  Pressable,
  FlatList,
  Image,
} from "react-native";
import { useSafeAreaInsets } from "react-native-safe-area-context";
import {
  MaterialIcons,
  Ionicons,
  Octicons,
  Foundation,
  MaterialCommunityIcons,
  AntDesign,
  FontAwesome5,
  Feather,
  EvilIcons,
} from "@expo/vector-icons";
// import { collection, query, where, getDocs } from "firebase/firestore";
import { auth, firestore } from "./firebase";
import {
  collection,
  orderBy,
  query,
  getDocs,
  getDoc,
} from "firebase/firestore";

export default function Home({ navigation, route }) {
  // New stuff for post config
  const [loggedInUserId, setLoggedInUserId] = useState("");
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [fetchingUser, setFetchingUser] = useState(true);
  // const { loggedInUserId } = route.params;

  const fetchUserfollowing = async (loggedInUserId) => {
    try {
      console.log("current user", loggedInUserId);
      const followingRef = collection(
        firestore,
        "following",
        loggedInUserId,
        "userFollowing"
      );
      const followingSnapshot = await getDocs(followingRef);

      const followingUsers = [];
      followingSnapshot.forEach((doc) => {
        followingUsers.push(doc.id);
      });

      return followingUsers;
    } catch (error) {
      console.log(error);
      return [];
    }
  };

  // Gets posts of each user current user is following
  const fetchPostsData = async () => {
    const followingUsers = await fetchUserfollowing(loggedInUserId);
    console.log("User is following", followingUsers);

    const postsData = [];
    for (const userId of followingUsers) {
      const userPostsRef = collection(firestore, "posts", userId, "userPosts");
      const userPostsSnapshot = await getDocs(userPostsRef);

      userPostsSnapshot.forEach((doc) => {
        const postData = doc.data();
        postsData.push({
          id: doc.id,
          ...postData,
        });
      });
    }

    return postsData;
  };
  // const fetchPostsData = async () => {
  //   const followingUsers = await fetchUserfollowing(loggedInUserId);
  //   console.log("User is following", followingUsers);

  //   const fetchedPosts = [];

  //   for (const userId of followingUsers) {
  //     const userPostsRef = collection(firestore, "posts", userId, "userPosts");
  //     const userPostsSnapshot = await getDocs(userPostsRef);

  //     for (const doc of userPostsSnapshot.docs) {
  //       const postData = doc.data();

  //       const userRef = doc.ref.parent.parent;
  //       const userDoc = await getDoc(userRef);
  //       console.log("User Document", userDoc);
  //       const userName = userDoc._document.data().name;

  //       fetchedPosts.push({
  //         id: doc.id,
  //         userName: userName,
  //         ...postData,
  //       });
  //     }
  //   }

  //   return fetchedPosts;
  // };

  const LoadingScreen = () => {
    return (
      <SafeAreaView style={styles.loadingContainer}>
        <Text>Loading...</Text>
      </SafeAreaView>
    );
  };
  // Where the magic happens
  useEffect(() => {
    const fetchCurrentUser = async () => {
      try {
        const user = auth.currentUser;
        if (user) {
          console.log("current user one", user.uid);
          setLoggedInUserId(user.uid);
        }
        setFetchingUser(false);
      } catch (error) {
        console.log(error);
        // Handle the error as needed
        setFetchingUser(false);
      }
    };

    const fetchPosts = async () => {
      try {
        const postsData = await fetchPostsData();
        setPosts(postsData);
        setLoading(false); // Set loading to false once posts are fetched
        console.log("Here are the posts: ", postsData);
      } catch (error) {
        console.log(error);
        setLoading(false); // Set loading to false in case of error
      }
    };

    fetchCurrentUser();
    fetchPosts();
  }, []);

  if (fetchingUser) {
    return <LoadingScreen />; // Display loading screen while fetching user
  }

  renderPost = (post) => {
    // const userName = post.user.name;
    return (
      <View style={styles.feedItem}>
        <View style={styles.parent}>
          <Text style={styles.username}>userName</Text>
          <Feather
            name="more-horizontal"
            size={24}
            color="black"
            style={styles.dots}
          />
        </View>
        <View style={styles.imageholder}>
          <Image source={{ uri: post.downloadURL }} style={styles.image} />
        </View>
        <View style={styles.reactions}>
          <Pressable>
            <AntDesign
              style={styles.iconcontainer}
              name="hearto"
              size={24}
              color="black"
            />
          </Pressable>
          <Pressable>
            <EvilIcons
              style={styles.iconcontainer}
              name="comment"
              size={30}
              color="black"
            />
          </Pressable>
        </View>
        <View style={styles.commentholder}>
          <Text style={styles.comment}>{post.caption}</Text>
        </View>
      </View>
    );
  };

  return (
    <SafeAreaView style={styles.phone}>
      <View
        style={
          styles.topnavbar
          // paddingTop: insets.top,
        }
      >
        <View style={styles.left}>
          <Text style={styles.instagram}>Instagram</Text>
        </View>
        <View style={styles.right}>
          <View style={styles.iconcontainer}>
            {/* <Text>liked</Text>*/}
            <AntDesign name="hearto" size={24} color="black" />
          </View>

          <View style={styles.iconcontainer}>
            <FontAwesome5 name="facebook-messenger" size={24} color="black" />
          </View>
        </View>
      </View>
      {loading ? (
        <LoadingScreen />
      ) : (
        <View style={styles.postdiv}>
          <FlatList
            style={styles.feed}
            data={posts}
            renderItem={({ item }) => renderPost(item)}
            keyExtractor={(item) => item.id}
            showsVerticalScrollIndicator={false}
          />
        </View>
      )}

      {/* Feed list */}
      {/* <View style={styles.postdiv}>
        <FlatList
          style={styles.feed}
          data={posts}
          renderItem={({ item }) => this.renderPost(item)}
          // renderItem={renderPost}
          keyExtractor={(item) => item.id}
          showsVerticalScrollIndicator={false}
        />
      </View> */}

      <View style={styles.navbar}>
        <Pressable
          style={styles.iconcontainer}
          onPress={() => {
            navigation.navigate("Home");
          }}
        >
          <MaterialIcons name="home" size={24} color="black" />
        </Pressable>
        <Pressable
          style={styles.iconcontainer}
          onPress={() => {
            navigation.navigate("Search");
          }}
        >
          <Ionicons name="search" size={24} color="black" />
        </Pressable>
        <Pressable
          style={styles.iconcontainer}
          onPress={() => {
            navigation.navigate("Post");
          }}
        >
          <Octicons name="diff-added" size={24} color="black" />
        </Pressable>
        <View style={styles.iconcontainer}>
          <Foundation name="play-video" size={24} color="black" />
        </View>
        <Pressable
          style={styles.iconcontainer}
          onPress={() => {
            navigation.navigate("Profile");
          }}
        >
          <MaterialCommunityIcons
            name="face-man-profile"
            size={24}
            color="black"
          />
        </Pressable>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  phone: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    backgroundColor: "red",
    // alignSelf: "center",
  },
  topnavbar: {
    height: "6%",
    width: "100%",
    backgroundColor: "white",
    position: "fixed",
    top: 0,
    display: "flex",
    flexDirection: "row",
    padding: 0,
    borderBottomWidth: 1,
    borderBottomColor: "grey",
  },
  right: {
    display: "flex",
    flexDirection: "row",
  },
  left: {
    marginRight: "50%",
    paddingLeft: 20,
  },
  instagram: {
    fontWeight: "bold",
    fontSize: 20,
  },
  navbar: {
    height: "10%",
    width: "100%",
    backgroundColor: "white",
    position: "absolute",
    bottom: 0,
    display: "flex",
    flexDirection: "row",
    justifyContent: "space-between",
  },
  pholder: {
    color: "white",
  },
  iconcontainer: {
    alignItems: "center",
    padding: 10,
  },
  postdiv: {
    // height: "80%",
    // width: "100%",
    flex: 1,
    //backgroundColor: "dodgerblue",
  },
  postheader: {
    backgroundColor: "pink",
    height: "5%",
    justifyContent: "center",
    padding: 10,
  },
  username: {
    fontWeight: "800",
    marginRight: "70%",
  },
  feed: {
    margin: 0,
  },
  feedItem: {
    backgroundColor: "white",
    padding: 0,
    marginVertical: 8,
  },
  parent: {
    flexDirection: "row",
    padding: 10,
  },
  imageholder: {
    // backgroundColor: "red",
    width: "100%",
    height: 450,
  },
  reactions: {
    backgroundColor: "grey",
    width: "100%",
    height: 50,
    //justifyContent: "center",
    flexDirection: "row",
  },
  image: {
    flex: 1,
    height: "100%",
    width: "100%",
  },
  commentholder: {
    padding: 10,
  },
});

//export default Home
